---
description: Guide for project structure for entire project
globs:
alwaysApply: true
---

# Project Structure Guide

## General Rules
- **Backend**
  - Follow **Clean Architecture** principles.
  - Folder names: **lowercase only**.
  - File names: must include folder name (e.g., `account.service.ts`).
- **Frontend**
  - Follow **Component-based Architecture**.
  - Folder names: **CamelCase**.
  - File names: must include folder name (e.g., `Account.entity.ts`).

---

## Backend Structure (Clean Architecture)
```
backend/
  ├── application/    # Use cases, services, business logic
  ├── domain/         # Entities, value objects, repository interfaces
  ├── infrastructure/ # Database, API clients, external services
  ├── presentation/   # Controllers, routes, middlewares
  ├── shared/         # Common utils, constants
```

### Responsibilities
- **application/**  
  Contains use cases and orchestrates business rules. Example: `account.service.ts`.
- **domain/**  
  Pure domain entities and repository contracts. Example: `account.entity.ts`.
- **infrastructure/**  
  Implements database (ORM), external services, third-party APIs.
- **presentation/**  
  Entry points (REST controllers, routes, middlewares).
- **shared/**  
  Cross-cutting concerns like logging, error handling, constants.

---

## Frontend Structure (Component-based)
```
frontend/
  ├── pages/        # Each file = a page, orchestrates data flow
  ├── components/   # Pure UI, no business logic
  ├── apis/         # API request definitions (fetch/axios)
  ├── entities/     # DTOs & models (e.g., Account.entity.ts)
  ├── services/     # Business logic, state management
  ├── helpers/      # Global utility functions
```

### Responsibilities
- **pages/**
  - Represents an actual page in the app.
  - Calls **apis/** to fetch data.
  - Passes data down to **components/**.  
  - Example: `Login.page.tsx`.

- **components/**
  - UI only (stateless/stateful).
  - No business logic.  
  - Example: `ChatBox.component.tsx`.

- **apis/**
  - Defines API requests (using `fetch` or `axios`).  
  - Example: `Account.api.ts` with `getAccount()`, `updateAccount()`.

- **entities/**
  - DTOs & models.  
  - Naming convention: `<name>.entity.ts`.  
  - Example: `Account.entity.ts`.

- **services/**
  - Business logic, caching, state management.  
  - Example: `Account.service.ts`.

- **helpers/**
  - Global utility functions (format date, string helpers, validators).  
  - Example: `date.helper.ts`.

---

## Naming Convention
Every file must include its folder type:
- `Account.page.tsx`
- `ChatBox.component.tsx`
- `User.api.ts`
- `Account.entity.ts`
- `Account.service.ts`
- `date.helper.ts`

---

## Example Flow (Frontend)
Example for **Account** module:
1. `Account.api.ts` → defines API calls.
2. `Account.service.ts` → uses `Account.api.ts` to implement business logic.
3. `Account.entity.ts` → defines DTO (e.g., `Account { id, name, email }`).
4. `Account.page.tsx` → calls `Account.service.ts`, gets data, and passes to component.
5. `Account.component.tsx` → renders UI only.

---

## Summary
- **Backend** → Clean Architecture (application, domain, infrastructure, presentation, shared).
- **Frontend** → Component-based (pages, components, apis, entities, services, helpers).
- **Strict naming rule**
